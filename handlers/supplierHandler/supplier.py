from aiogram import types, dispatcher
from handlers.supplierHandler import supplier_kb
from handlers.objectHandler.objectGenerativeKb import objButton
from handlers.objectHandler import objectWorker
from handlers.foremanHandler import foreman_kb
from handlers.generalHandlers.kbByRole import takeRoleKb
from handlers.adminHandler.adminTools import adminCreateUser
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from handlers.generalHandlers import general_kb
import db
from bot_create import dp, bot

class addItem(StatesGroup):
    application_id = State()
    title = State()
    quantity = State()
    cancel = State()

class changePerfom(StatesGroup):
    quan = State()

async def command_supplier(message:types.Message):
    if message.text == '/üôã–ü—Ä–æ—Ñ–∏–ª—å':
        for user in db.userInfo(message.from_user.id):
            await message.answer(f"*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
                                 f"*id*: {user[0]}\n"
                                 f"*–ò–º—è*: {user[1]}\n"
                                 f"*–§–∞–º–∏–ª–∏—è*: {user[2]}\n"
                                 f"*–†–æ–ª—å*: {user[3]}\n"
                                 f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {user[4]}\n"
                                 f"*–ü–æ—á—Ç–∞*: {user[5]}", parse_mode="Markdown")
    if message.text == '/üè°–û–±—ä–µ–∫—Ç—ã':
        await message.reply('–ü–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–±—ä–µ–∫—Ç–∞–º–∏', reply_markup=supplier_kb.obj)
    if message.text == '/üè¢–í—Å–µ_–æ–±—ä–µ–∫—Ç—ã':
        for obj in db.checkObj():
            # await bot.send_photo(chat_id=message.from_user.id, photo=open(f"static/obj-{obj[0]}.jpg", 'rb'))
            await bot.send_message(message.from_user.id, f"*–û–±—ä–µ–∫—Ç*: {obj[1]}\n*–ü—Ä–æ—Ä–∞–±*: {obj[2]}", parse_mode="Markdown", reply_markup= objButton(obj[0]))
    if message.text == '/‚óÄÔ∏è–ù–∞–∑–∞–¥_—Å–Ω–∞–±–∂–µ–Ω–∏–µ':
        await message.reply('–ú–µ–Ω—é', reply_markup= supplier_kb.supplier)


@dp.callback_query_handler()
async def takeApplications(callback: types.CallbackQuery):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å inline –∫–Ω–æ–ø–æ–∫. –ü–ï–†–ï–ü–ò–°–ê–¢–¨.
    #
    # callback —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É obj/app/item_id_action
    # obj —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏. –≤ id –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è id –æ–±—ä–µ–∫—Ç–∞. –ë–µ–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã.
    # app —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∑–∞—è–≤–∫–∞–º–∏. –≤ id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è id –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: info(–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã), add(–¥–æ–±–∞–≤–ª—è–µ—Ç –ø—É–Ω–∫—Ç –≤ –∑–∞—è–≤–∫—É), delete(—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É)
    # item —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—É–Ω–∫—Ç–∞–º–∏. –í id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è id –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: changeStatus(–ò–∑–º–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –∑–∞—è–≤–∫–∏), delete(—É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç –∑–∞—è–≤–∫–∏) –∏ —Ç.–¥
    if callback.data.split('_')[0] == 'obj':
        obj_id = int(callback.data.split('_')[1])
        if len(db.checkApplications(obj_id)) > 0:
            await callback.message.answer(f"---------------–û–±—ä–µ–∫—Ç-{obj_id}--------------")
            for Application in db.checkApplications(obj_id):
                fullInfo = InlineKeyboardMarkup()
                fullInfoBut = InlineKeyboardButton(text= "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ", callback_data=f"app_{Application[0]}_info")
                fullInfoChange = InlineKeyboardButton(text= "–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤ –∑–∞—è–≤–∫—É", callback_data=f"app_{Application[0]}_add")
                appDelete = InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É",callback_data=f"app_{Application[0]}_delete")
                fullInfo.add(fullInfoBut).add(fullInfoChange).add(appDelete)
                await callback.message.answer(f"*–ó–∞—è–≤–∫–∞-{Application[0]}*\n"
                                      f"*–°–æ–∑–¥–∞–Ω–∞: {Application[3]}*", parse_mode="Markdown", reply_markup=fullInfo)
                await callback.answer()
            await callback.message.answer(f"----------------–û–±—ä–µ–∫—Ç-{obj_id}-------------")
        else: await callback.message.reply('–ù–µ—Ç –∑–∞—è–≤–æ–∫.')

    if callback.data.split('_')[0] == 'app':
        app_id = int(callback.data.split('_')[1])
        if callback.data.split('_')[2] == "info":
            await callback.message.answer(f"------------–ó–∞—è–≤–∫–∞-{app_id}--------------")
            for item in db.checkItems(app_id):
                itemAction = InlineKeyboardMarkup()
                itemChange = InlineKeyboardButton(text = '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"item_{item[0]}_change")
                itemAction.add(itemChange)
                await callback.message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ:    *{item[1]}*\n"
                                              f"–ö–æ–ª-–≤–æ:          *{item[6]}*\n"
                                              f"–°—Ç–∞—Ç—É—Å:           *{item[2]}*\n" , parse_mode="Markdown", reply_markup=itemAction)
            await callback.message.answer("-----------------------------------------")
            await callback.answer()
        if callback.data.split('_')[2] == "add":
            #–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤ –∑–∞—è–≤–∫—É". –°–æ–∑–¥–∞–µ—Ç –ø—É–Ω–∫—Ç –≤ –∑–∞—è–≤–∫–µ
            await callback.message.answer(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ {app_id}. –ü—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏–∂–µ', parse_mode="Markdown", reply_markup=general_kb.app)
            await addItem.application_id.set()
            await callback.answer()
        if callback.data.split('_')[2] == "delete":
            #–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É". –£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É
            await callback.message.edit_text('–£–¥–∞–ª–µ–Ω–æ')
            db.appDelete(app_id)


    if callback.data.split('_')[0] == 'item':
        item_id = int(callback.data.split('_')[1])
        if callback.data.split('_')[2] == 'change':
            #–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É". –ü–µ—Ä–µ–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –∑–∞—è–≤–∫–∏
            ItemChange_kb = InlineKeyboardMarkup()
            ItemChange_status = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data= f'item_{item_id}_changeStatus')
            ItemChange_perfom = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å "–∏—Å–ø–æ–ª–Ω–µ–Ω–∞"', callback_data= f'item_{item_id}_changePerfom')
            ItemDelete = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç', callback_data= f'item_{item_id}_delete')
            ItemChange_kb.add(ItemChange_status).add(ItemDelete)
            await callback.message.edit_reply_markup(reply_markup= ItemChange_kb)
        if callback.data.split('_')[2] == 'changeStatus':
            #–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å". –ü–µ—Ä–µ–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
            ItemChange_kb = InlineKeyboardMarkup()
            ItemChange_name = InlineKeyboardButton(text='–°—Ç–∞—Ç—É—Å "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"', callback_data=f'item_{item_id}_changeDbTreat')
            ItemChange_quan = InlineKeyboardButton(text='–°—Ç–∞—Ç—É—Å "–ó–∞–∫–∞–∑–∞–Ω–æ"', callback_data=f'item_{item_id}_changeDbOrder')
            ItemChange_status = InlineKeyboardButton(text='–°—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"', callback_data=f'item_{item_id}_changeDbDone')
            ItemChange_kb.add(ItemChange_name).add(ItemChange_quan).add(ItemChange_status)
            await callback.message.edit_reply_markup(reply_markup=ItemChange_kb)
        if callback.data.split('_')[2] == 'changeDbTreat':
            #–°—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            db.itemStatusTreat(item_id)
            item  = db.findItem(item_id)
            itemAction = InlineKeyboardMarkup()
            itemChange = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"item_{item[0]}_change")
            itemAction.add(itemChange)
            await callback.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ:    *{item[1]}*\n"
                                          f"–ö–æ–ª-–≤–æ:          *{item[6]}*\n"
                                          f"–°—Ç–∞—Ç—É—Å:           *{item[2]}*\n" , parse_mode="Markdown", reply_markup=itemAction )
        if callback.data.split('_')[2] == 'changeDbOrder':
            #–°—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–ó–∞–∫–∞–∑–∞–Ω–æ"
            db.itemStatusOrder(item_id)
            item = db.findItem(item_id)
            itemAction = InlineKeyboardMarkup()
            itemChange = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"item_{item[0]}_change")
            itemAction.add(itemChange)
            await callback.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ:    *{item[1]}*\n"
                                             f"–ö–æ–ª-–≤–æ:          *{item[6]}*\n"
                                             f"–°—Ç–∞—Ç—É—Å:           *{item[2]}*\n"
                                             , parse_mode="Markdown", reply_markup=itemAction)
            #f"–ò—Å–ø–æ–ª–Ω–µ–Ω–∞: *{item[4]}*"
        if callback.data.split('_')[2] == 'changeDbDone':
            #–°—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            db.itemStatusDone(item_id)
            item = db.findItem(item_id)
            itemAction = InlineKeyboardMarkup()
            itemChange = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f"item_{item[0]}_change")
            itemAction.add(itemChange)
            await callback.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ:    *{item[1]}*\n"
                                             f"–ö–æ–ª-–≤–æ:          *{item[6]}*\n"
                                             f"–°—Ç–∞—Ç—É—Å:           *{item[2]}*\n" , parse_mode="Markdown", reply_markup=itemAction)
        if callback.data.split('_')[2] == 'delete':
            #–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç". –£–¥–∞–ª—è–µ—Ç –ø—É–Ω–∫—Ç –∑–∞—è–≤–∫–∏
            db.ItemDelete(item_id)
            await callback.message.edit_text(f"–£–¥–∞–ª–µ–Ω–æ")

async def inputAppId(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['app_id'] = message.text
            if data['app_id'].isdigit():
                await addItem.next()
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
            else:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                await addItem.application_id.set()
    except:
        await message.reply("[–û–®–ò–ë–ö–ê]. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ", reply_markup= await takeRoleKb(message.from_user.id))
        await state.reset_state()
        await state.finish()


async def inputTitle(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['title'] = message.text.capitalize()
        await addItem.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–æ–±—ä–µ–º")
    except:
        await message.reply(
            "[–û–®–ò–ë–ö–ê]. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup= await takeRoleKb(message.from_user.id))
        await state.reset_state()
        await state.finish()


# @dp.message_handler(state=registerForm.second_name)
async def inputQuantity(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['quantity'] = message.text.capitalize()
            db.addItem(data['title'], data['quantity'], int(data['app_id']))
            db.updateLastItem(data['title'], int(data['app_id']))
        await state.finish()
        await message.reply("–ü—É–Ω–∫—Ç –¥–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–Ω!", reply_markup= await takeRoleKb(message.from_user.id))
    except:
        await message.reply(
            "[–û–®–ò–ë–ö–ê]. –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç. –ß—Ç–æ-—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", reply_markup= await takeRoleKb(message.from_user.id))
        await state.reset_state()
        await state.finish()


async def inputQuan(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await state.set_state()
        data['quan'] = message.text
        await message.answer(data['quan'])



def register_handerls_supplier(dp : dispatcher):
    dp.register_message_handler(inputAppId, state=addItem.application_id)
    dp.register_message_handler(inputTitle, state=addItem.title)
    dp.register_message_handler(inputQuantity, state=addItem.quantity)
    dp.register_message_handler(command_supplier, commands=['üôã–ü—Ä–æ—Ñ–∏–ª—å','üè°–û–±—ä–µ–∫—Ç—ã','üè¢–í—Å–µ_–æ–±—ä–µ–∫—Ç—ã','‚ùóÔ∏è–ù–æ–≤—ã–µ_–∑–∞—è–≤–∫–∏', '‚óÄÔ∏è–ù–∞–∑–∞–¥_—Å–Ω–∞–±–∂–µ–Ω–∏–µ' ])
